// API endpoint to return pre-signed URL for downloading from the private bucket
app.get('/generate-download-url', async (req: Request, res: Response) => {
    try {
        // Get the file ID from the query parameter
        const fileId = req.query.fileId as string;
        if (!fileId) {
            return res.status(400).json({ error: 'File ID is required' });
        }

        // Fetch file status from the database
        const file = await db('files').select('status').where('id', fileId).first();
        if (!file) {
            return res.status(404).json({ error: 'File not found' });
        }

        // Check if file status is "completed"
        if (file.status !== 'completed') {
            return res.status(403).json({ error: 'File is not completed' });
        }

        // Generate pre-signed URL for downloading the file from the private bucket
        const expiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const downloadURL = await getPrivateDownloadURL(fileId, expiresInSeconds);

        // Return the pre-signed URL for downloading in the response
        res.json({ fileId, downloadURL });
    } catch (error) {
        console.error('An error occurred:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});
