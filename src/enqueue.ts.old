import express, { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import knex from 'knex';
import amqp from 'amqplib';

// Create a Knex instance with your database configuration
const db = knex({
    client: 'mysql', // Adjust according to your database type
    connection: {
        host: 'your-db-host',
        user: 'your-db-user',
        password: 'your-db-password',
        database: 'your-db-name'
    }
});

// Create the file table schema using migrations
async function migrateLatest() {
    await db.migrate.latest();
}

// Create a connection to AMQ
const amqUrl = ''; // Replace with your AMQ URL
const amqConnection = await amqp.connect(amqUrl);
const amqChannel = await amqConnection.createChannel();

// Ensure the queue exists or create it
const queueName = 'to_process';
await amqChannel.assertQueue(queueName, { durable: true });

// Create Express app
const app = express();
const port = 3000; // Set your desired port

// API endpoint to generate a UUID and return the pre-signed URL for uploading
app.get('/generate-upload-url', async (req: Request, res: Response) => {
    try {
        // Get the file name from the query parameter
        const fileName = req.query.fileName as string;
        if (!fileName) {
            return res.status(400).json({ error: 'File name is required' });
        }

        // Generate UUID for the file
        const fileId = uuidv4();

        // Store file ID, file name, and processing status in the database
        await db('files').insert({
            id: fileId,
            name: fileName,
            status: 'initiated',
        });

        // Generate pre-signed URL for uploading the file
        const expiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const uploadURL = await getPublicUploadURL(fileId, expiresInSeconds);

        // Return the generated UUID and the pre-signed URL for uploading in the response
        res.json({ fileId, uploadURL });
    } catch (error) {
        console.error('An error occurred:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to put a file ID onto a queue in AMQ for processing
app.get('/enqueue-file', async (req: Request, res: Response) => {
    try {
        // Get the file ID from the query parameter
        const fileId = req.query.fileId as string;
        if (!fileId) {
            return res.status(400).json({ error: 'File ID is required' });
        }

        // Put the file ID onto the 'to_process' queue in AMQ
        await amqChannel.sendToQueue(queueName, Buffer.from(fileId), { persistent: true });

        // Return success response
        res.json({ message: 'File enqueued for processing' });
    } catch (error) {
        console.error('An error occurred:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the Express server and migrate the latest changes to the database
app.listen(port, async () => {
    console.log(`Server is running on port ${port}`);

    try {
        // Migrate latest changes to the database
        await migrateLatest();
        console.log('Database migration completed successfully.');
    } catch (error) {
        console.error('An error occurred during database migration:', error);
        process.exit(1); // Exit the process with a non-zero status code
    }
});
