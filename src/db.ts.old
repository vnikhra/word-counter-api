import express, { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import knex, { MigratorConfig } from 'knex';

// Create a Knex instance with your database configuration
const db = knex({
    client: 'mysql', // Adjust according to your database type
    connection: {
        host: 'your-db-host',
        user: 'your-db-user',
        password: 'your-db-password',
        database: 'your-db-name'
    }
});

// Create the file table schema using migrations
async function migrateLatest() {
    const migratorConfig: MigratorConfig = {
        tableName: 'knex_migrations', // Optional: Specify the name of the migrations table
        directory: __dirname + '/migrations' // Directory containing migration files
    };
    await db.migrate.latest(migratorConfig);
}

// Create Express app
const app = express();
const port = 3000; // Set your desired port

// API endpoint to generate a UUID and return the pre-signed URL for uploading
app.get('/generate-upload-url', async (req: Request, res: Response) => {
    try {
        // Generate UUID for the file
        const fileId = uuidv4();

        // Generate pre-signed URL for uploading the file
        const expiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const uploadURL = await getPublicUploadURL(fileId, expiresInSeconds);

        // Return the generated UUID and the pre-signed URL for uploading in the response
        res.json({ fileId, uploadURL });
    } catch (error) {
        console.error('An error occurred:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to return pre-signed URL for downloading from the private bucket
app.get('/generate-download-url', async (req: Request, res: Response) => {
    try {
        // Get the file ID from the query parameter
        const fileId = req.query.fileId as string;
        if (!fileId) {
            return res.status(400).json({ error: 'File ID is required' });
        }

        // Generate pre-signed URL for downloading the file from the private bucket
        const expiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const downloadURL = await getPrivateDownloadURL(`${fileId}`, expiresInSeconds);

        // Return the pre-signed URL for downloading in the response
        res.json({ fileId, downloadURL });
    } catch (error) {
        console.error('An error occurred:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the Express server and migrate the latest changes to the database
app.listen(port, async () => {
    console.log(`Server is running on port ${port}`);

    try {
        // Migrate latest changes to the database
        await migrateLatest();
        console.log('Database migration completed successfully.');
    } catch (error) {
        console.error('An error occurred during database migration:', error);
        process.exit(1); // Exit the process with a non-zero status code
    }
});
