

// Set the endpoint to your MinIO server
const endpoint = 'http://your-minio-server:9000'; // Replace with your MinIO server endpoint
const accessKeyId = 'YOUR_ACCESS_KEY_ID'; // Replace with your AWS access key ID or MinIO access key ID
const secretAccessKey = 'YOUR_SECRET_ACCESS_KEY'; // Replace with your AWS secret access key or MinIO secret access key

// Create S3 service object with MinIO configuration


// Bucket names
const publicBucketName = 'public-bucket';
const privateBucketName = 'private-bucket';


// Function to generate a pre-signed URL for uploading to the public bucket
async function getPublicUploadURL(s3: AWS.S3, bucketName: string, objectKey: string): Promise<string> {
    try {
        const params: AWS.S3.PresignedPost.Params = {
            Bucket: bucketName,
            Fields: {
                key: objectKey,
            },
            Expires: 600,
        };
        const data = s3.createPresignedPost(params);
        return data.url;
    } catch (err) {
        console.error('Error generating public upload URL:', err);
        throw err;
    }
}

// Function to generate a pre-signed URL for downloading from the private bucket
async function getPrivateDownloadURL(objectKey: string, expires: number): Promise<string> {
    try {
        const params: AWS.S3.PresignedUrl.Params = {
            Bucket: privateBucketName,
            Key: objectKey,
            Expires: expires,
        };
        const url = await s3.getSignedUrlPromise('getObject', params);
        return url;
    } catch (err) {
        console.error('Error generating private download URL:', err);
        throw err;
    }
}



// Example usage:
async function main() {
    try {
        // Create public bucket for downloads
        await createBucketIfNotExists(publicBucketName);
        await setPublicReadPolicy(publicBucketName);

        // Create private bucket for uploads
        await createBucketIfNotExists(privateBucketName);
        await setPrivateWritePolicy(privateBucketName);

        // Generate pre-signed URL for public bucket upload
        const publicObjectKey = 'example.jpg'; // Object key (file name) for which you want to generate the URL
        const publicExpiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const publicUploadURL = await getPublicUploadURL(publicObjectKey, publicExpiresInSeconds);
        console.log('Public Upload URL:', publicUploadURL);

        // Generate pre-signed URL for private bucket download
        const privateObjectKey = 'example_private.jpg'; // Object key (file name) for which you want to generate the URL
        const privateExpiresInSeconds = 3600; // Expiration time for the URL in seconds (1 hour in this example)
        const privateDownloadURL = await getPrivateDownloadURL(privateObjectKey, privateExpiresInSeconds);
        console.log('Private Download URL:', privateDownloadURL);

        console.log('Buckets created successfully.');
    } catch (err) {
        console.error('An error occurred:', err);
    }
}

// Run the example
main();
